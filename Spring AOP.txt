Spring AOP : Aspect Oriented Programming :
===========================

Procedure Language 

Limitation of Procedure Oriented Programming language 
In Procedure oriented language we will focus more than functionality or coding rather 
than properties or state.

Object oriented langauge we will focus on properties or state. 

AOP focus on functionality. 

generally while writing functionality or logic the code divided into two parts. 
1. core functionality or primary functionality or atual coding for that application.  
2.  secondary functionality or the functionality which is common on all application or 
which will support to develop the application or cross cutting is known as secondary functionality 
according to AOP. 

	Banking application 
	1.checkBalance 
	2. transfer the amount 
	3. withdraw 
	4. deposit  etc 

	Secondary functionality 
	1. login 
	2. database connectivity 
	3. security 
	4. validation   etc 

	AOP allow separation of the cross cutting concern. 

	These are cross cutting concern are different from the main business functionality. 
	

AOP Terminology 
--------------------
1. Aspect : An aspect is a module that encapsulated adivce and pointcuts and provide cross cutting for our application. 
2. Point cut : A point cut is an expression language that selects one or more join points where advice will execute.
3. joint point : A join point is a point in the application were we can apply an AOP advice. 
4. Adivce : The advice is an action that we will excecute before or after the method or business method execution. 
	advice divided into 5 types 
	a. before 
	b. after 
	c. around (combination of before and after)
	d. afterthrow (if any exception generate)
	e. afterReturning 

Spring AOP-Advices:
-----------------------
■ Before advice: Executes before a join point, and if this advice throws an exception-execution flow doesn't proceed to the join point.

■ After returning advice: This Advice will be executed after successful completion of a join point: for e.g, if a method returns without any exception.

■ After throwing advice: This advice will be executed only if the method throws an exception.

■ After advice: (finally): The Advice will be executed, regardless of whether the join point exits normal or exceptional return.

■ Around advice: This is an advice that surrounds a join point and can perform custom action before and even after the method invocation.


AOP Concepts (Contd.):
--------------------------
⚫ Target: An object being advised by an aspect (or more aspects). ◽ A 'target object' is also referred to as the 'advised object'.

⚫ Weaving: The process which links aspects with other application objects. ◽ Weaving can be handled in different ways by different frameworks. ◽ Can be done at compile time (e.g.using the AspectJ compiler), load time, or at runtime (e.g. Spring AOP).

⚫ AOP proxy: It is an object created by the framework in order to implement the aspects (advise method executions).


Spring AOP Aspects :
-----------------------
■ @AspectJ - is used for declaring aspects using annotations, as simple Java classes.

■ By including the following element in spring configuration document, @AspectJ is enabled: aop:aspectj-autoproxy/

■ The bean defined in your application context, of @Aspect annotated class, will be detected by Spring and used to configure aspects in Spring AOP.

E.g.: @Aspect public class MyCustomAspect { . . . }
		
	 